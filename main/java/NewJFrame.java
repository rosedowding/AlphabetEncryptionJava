/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rose
 */

import java.util.*;
import javax.swing.JOptionPane;

public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    
    public String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ,-!?.0123456789"; //Create a public string containing the standard alphabet
    public String cipher = "YZABCDEFGHIJKLMNOPQRSTUVWX .,-!?9201837654"; //Create a public string containing the cipher alphabet

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputField = new javax.swing.JTextField();
        InputLabel = new javax.swing.JLabel();
        EncryptButton = new javax.swing.JButton();
        InputLabel1 = new javax.swing.JLabel();
        DecryptInputField = new javax.swing.JTextField();
        DecryptButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Basic Encryption Program");

        InputLabel.setText("Value to Encrypt:");
        InputLabel.setName("InputLabel"); // NOI18N

        EncryptButton.setText("Encrypt");
        EncryptButton.setToolTipText("");
        EncryptButton.setName("EncryptButton"); // NOI18N
        EncryptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EncryptButtonMouseClicked(evt);
            }
        });

        InputLabel1.setText("Value to Decrypt:");
        InputLabel1.setName("InputLabel"); // NOI18N

        DecryptButton.setText("Decrypt");
        DecryptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DecryptButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InputLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(InputLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DecryptButton)
                    .addComponent(EncryptButton)
                    .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DecryptInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputLabel)
                    .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(EncryptButton)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DecryptInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputLabel1))
                .addGap(31, 31, 31)
                .addComponent(DecryptButton)
                .addGap(85, 85, 85))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //This code is ran when the "Encrypt" button is clicked
    private void EncryptButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EncryptButtonMouseClicked
        List<Character> output = new ArrayList<Character>(); //Create a new list of characters which will be used to store the output
        String input = InputField.getText().toUpperCase(); //Create a new string containing the user input converted to uppercase (as the cipher doesn't include lowercase characters)
        
        for (int i = 0; i < input.length(); i++) { //Repeat loop for each character of the input
            for (int j = 0; j < alpha.length(); j++) { //Repeat loop for each character of the alphabet
                if (input.toCharArray()[i] == alpha.toCharArray()[j]) { //If the character of the input matches with the character of the alphabet
                    output.add(cipher.toCharArray()[j]); //Add the cipher counterpart to the output list
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, output.toString(), "Encryption Complete", JOptionPane.INFORMATION_MESSAGE); //Convert the output list to a string and display it in a message box with the title "Encryption Complete" and message type INFORMATION_MESSAGE.
        
    }//GEN-LAST:event_EncryptButtonMouseClicked

    private void DecryptButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DecryptButtonMouseClicked
        List<Character> output = new ArrayList<Character>(); //Create a new list of characters which will be used to store the output
        String input = DecryptInputField.getText().toUpperCase(); //Create a new string containing the user input converted to uppercase (as the cipher doesn't include lowercase characters)
        
        for (int i = 0; i < input.length(); i++) { //Repeat loop for each character of the input
            for (int j = 0; j < cipher.length(); j++) { //Repeat loop for each character of the cipher
                if (input.toCharArray()[i] == cipher.toCharArray()[j]) { //If the character of the input matches with the character of the cipher
                    output.add(alpha.toCharArray()[j]); //Add the alphabet counterpart to the output list
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, output.toString(), "Decryption Complete", JOptionPane.INFORMATION_MESSAGE); //Convert the output list to a string and display it in a message box with the title "Encryption Complete" and message type INFORMATION_MESSAGE.
    }//GEN-LAST:event_DecryptButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DecryptButton;
    private javax.swing.JTextField DecryptInputField;
    private javax.swing.JButton EncryptButton;
    private javax.swing.JTextField InputField;
    private javax.swing.JLabel InputLabel;
    private javax.swing.JLabel InputLabel1;
    // End of variables declaration//GEN-END:variables
}
